Class - blueprint for a house; we can build as many houses as we want based on the blueprint

Instance - each house I build using the blueprint is called an instance

Reference - each house I build has a physical location on the disk; I can copy that reference as many times as I like, but there is only one house

House blueHouse = new House("blue")
House anotherHouse = bluehouse // this is a reference to the same "physical" object blueHouse (in memory)

this - keyword used to access/call the current class variables and methods; commonly used with constructors, setters, and getters

private String color;
public House(String color) {
	this.color = color;
}

public String getColor() {
	return color;
}

public void setColor(String color) {
	this.color = color;
	}
}

super - keyword used to access/call the parent/superclass variable and method

class SuperClass {
	public void printMethod() {
		System.out.println("Printed in Superclass.");
	}
}

class SubClass extends SuperClass {

@Override
public void printMethod () { // same name as method in Superclass
	super.printMethod(); // call the superclass printMethod
	System.out.println("Printed in Subclass");
	}
}

Constructor Chaining
-----------------------------
One contstructor calling the next.



Method Overloading - providing two or more seperate methods in a class with the same name but different parameters; allows us to reuse the same method name; reduces duplicate code and we don't have to remeber multiple method names; can happen inside a single class or a subclass of that class

Method Overriding -  defining a method in a subclass that already exists in the parent class with the same signature (name and arguments); recommended to put @Override above the method definition as an annotation; can't override static methods

Static Variables - uses static keyword; shared across all instances of the class

Instance Variables - doesn't use the static keyword; belongs to the specific instance of a class

Static Methods - uses static keyword; does not use instance variables 

Instance Methods - belongs to an instance of a class; class must be instantiated in order to use the method
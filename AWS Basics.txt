AWS Basics


Geographical Concepts
-----------------------------
Regions (us-east, us-west)
 	Availability Zones (us-east1a, us-east-1b)
 	
 	
Account Structure
-----------------------
Organization
	Account (Department, Team, Environment)
	

Multi Account Management
------------------------------------

[ AWS Organizations ]

// Security Control Policies (SCPs)


[ AWS Control Tower ]
	
	
IAM
--------


Networking
---------------

VPC
	Subnets
	 	Routes
	 	
// Traffic Flow	
Internet Gateway -> VPC Router -> Route Table -> Network ACL -> Subnet -> EC2
	 	
[ VPC ]

[ Subnets ]
- Network ACLs are the first line of defense to filter out subnet traffic
- Network ACLs are STATELESS

[ Routes ]

[ Elastic IPs ]

[ VPC Peering ]

[ VPC Endpoints ]
- enables me to privately connect to AWS Services within my VPC without using an Internet/NAT Gateway
- communication is established via RFC 1918 addressing and does not require a Public IP Address
- powered by PrivateLink
- not supported by ALL services

// Types

Interface - 
Gateway - supports S3, Dynamodb

[ Direct Connect ]

[ Direct Connect Gateway ]

[ Transit Gateway ]

[ VPN ]

[ Route 53 ] 
- offers health checks to determine availability of web applications


Compute (EC2)
----------------------

[ Instance Families ] 

T,M -  General Purpose 
R,Z - Memory Optimized
C - Compute Optimized 
P - High Performance Compute
L,D- Storage Optimized

[ Amazon Machine Images - AMIs ]

[ Launch Templates ]

[ Auto-Scaling Groups ]
- set SNS to notify me when scaling events happen 
- Use launch templates to define image requirements
- Let auto scaling configuration handle the rest 


[ EBS Volumes ]
- Multi-attach multiple EC2s in the same availability zone

// Encryption

- data is encrypted inside the volume at rest
- all data in flight moving between the instance and the volume is encrypted
- snapshots are encrypted
- all volumes created from the snapshot are encrypted
- encrypt and decrypt are handled transparently (I don't need to do anything)
- latency impact is minimal
- can create an encrypted snapshot from an unencrypted volume

[ Hibernation ]
- flushes RAM contents to disk prior to shutting down
- provides fast start up times (since RAM contents are loaded from disk) 
- can't hibernate for more than 60 days




Storage Solutions
-----------------------

[ S3 ]

5 GB - single file limit
100 MB  - Multipart threshold

// Performance

- more prefixes -> higher performance (requests per second)
- prefixes are simply folders and subfolders

// Storage Classes

Standard - hot storage
Infrequent Access (IA) - low per GB storage price; per GB retrieval fee
One Zone-IA - same as IA, but within a single AZ; 25% cheaper than IA
Glacier Instant Retrieval - -- NEW
Glacier Flexible Retrieval  -- NEW
Glacier Deep Archive 

**Intelligent Tiering: cycles objects between Standard and IA based on access patterns

// Back-Up

S3 Replicaition 
- replicates objects from one bucket to another (same region or another)
- versioning MUST be enabled on source and dest. bucket
- configuration is based on "Replication Rules"
- delete markers are not replicated by default (must be explicitly enabled)

[ EFS ]
- managed NFS that can be mounted on many EC2 instances (NFSv4)
- supports Linux workloads (Windows not supported)
- supports connections across all availability zones
- supports 1000s of concurrent connections
- very expensive
- great for content management

// Concept
Mountpoint
	Access Points

[ FSx ]
- managed Windows server that runs SMB (Server Message Block)
- designed for Windows and Windows application
- supports AD users, ACLs, groups and security policies



SQL Databases
---------------------

[ Amazon Aurora ]
- AWS propriety relational database 
- Supports MySQL, PostgreSQL engines
- supports up to 15 read replicas for Aurora
- support up to 5 read replicas for MySQL and Postgres engines
- stores 2 copies of your data in 3 AZs minimum (6 copies of your data)
- Aurora automated backups turned on by default 
- Auto scales data storage in 10GB increments; can scale up to 128TBs

[ Aurora Serverless ] 
- used for infrequently and unpredictable workloads 
- scales, stops and starts automatically based on load


No-SQL Databases
---------------------------

[ DynamoDB]

[ DocumentDB ]
- Amazons MongoDB implementation 

[ Amazon Keyspaces ]
- Amazons serverless Apache Cassandra implementation
- Distributed NoSQL Database


Time Series Databases
---------------------------

[ Amazon Timestream ]
- database for housing time series data (think Prometheus)

Graph Databases
---------------------------

[ Amazon Neptune ]
- Amazons graph database offering (think Neo4J)



Big Data Services
------------------------

[ Redshift ] 
- fully managed relational petabyte scale data-warehouse
- can hold up to 16 PB of data
- not intended for use as a backend for a web application
- not a highly available service (one AZ deployment)

[ EMR ]
- managed platform for processing vast amounts of data using popular open source tools such as Spark, and Hive
- ETL tool
- fleet of EC2s run in your VPC

[ Kinesis ] 
- allows me to ingest, process, and analyze real-time streaming data
- think of Kinesis as a highway whose responsiblity it is to help move traffic fast

[ Kinesis Data Steams ]
- real time streaming for ingesting data 
- as fast as we can get
- I am responsible for creating the consumer and scaling the stream
- I am responsible for writing the code to build the applicaiton/service

// Concept
Producer -> Shards -> Consumers (S3, Dynamodb, Redshift, EMR, etc)

[ Kinesis Data Firehose ]
- transfer tool to get data into S3, redshift, elasticsearch, splunk
- near real time
- automatically sclaes

// Concept
Input (data) -> Firehose -> Destination (S3, Elasticsearch, Redshift) 
*support for 3rd party endpoints

[ Kineses Data Analytics ]
- run SQL queries against data that is streaming through Firehose and Data Streams


[ AWS Athena ]
- allows me to directly query data in S3 buckets (data lake) without loading into a traditional database

[ AWS Glue ] 
- serverless data integration service that handles ETL jobs
- can effectively replace EMR

// Concept
AWS S3 (Storage) -> Glue Crawlers (Discovery) -> Glue Catalog (Structure) -> Amazon Athena (Query) -> Quicksight (Visualize)

[ Data Pipeline ]
- managed ETL service for automating movement and transformation of data
- define data driven workflows made up of steps
- steps are dependent on previous task completing successfully
- automatically retires failed activities
- can define parameters for data transformations
- highly available
- integrates seamlessly with AWS services (S3, DynamoDB, Redshift, etc) 
- can set schedules for specific task

// Concepts
Pipeline Definition
	Managed Compute
		Task Runners 
			Data Nodes
			
// Use Cases
 importing/exporting DynamoDb data
 copying csv files between S3 buckets in a programmatic fashion
 exporting RDS data to S3
 copying data to Redshift

[ Amazon Managed Streaming for Apache Kafka (MSK) ]
- fully managed service for data streaming applications via Apache Kafka
- provides control plane operatiosn (create, update, delete clusters as needed)
- leverage Kafka data-plane operations for producing and consuming streaming data
- encrypts data at rest and in transit BY DEFAULT

// Concepts
Broker Nodes - specify amount of nodes per AZ  at cluster creation
Zookeeper Nodes - created by AWS
Producers, Consumers, Topics - data plan operations allow for the creation of topics and the ability to produce/consume data


[ Opensearch ] 
- quickly ingest and search data in clusters
- easily scalible
- backed by IAM auth, VPC security groups,  
- supports native SQL queries for BI applications
- seamlessly integration with other AWS Services 

[ Quicksight ] 
- visualizaiton tool (think Tableau)


AI/ML
--------------

[ Rekognition ]
- Content moderation - make sure images uploaded donâ€™t break policies 
- Object/Person recognition 

[ Sagemaker ]
- service for training models on AWS

Ground truth - setup labeling jobs for training data
Notebook - managed Jupyter notebook environment
Training - train and tune models created from groundtruth and notebooks
Inference - deploy your models at scale 

// Deploy Mode
Offline - 
Online - low latency responses; returns a json string; good if you need immediate responses 


Application Platforms (Web & Mobile)
--------------------------------------------------

[ AWS Beanstalk ] 

[ AWS App Runner ] 

[ AWS Amplify ]
- tools for frontend web, and mobile development 
- Amplify hosting - provides support for frontend frameworks (React, Vue, Angular, etc)
- Separates staging and production environments 
- Supports SSR (Next JS)
- Amplify Studio - provides easy auth
- Visuals developer console on the console 
- Easy to use components (backends, connections, etc)

[ AWS Device Farm ]
- app testing service 
- helps simplify interactions with Android, and IOS, and web apps hosted by AWS
- Automated Testing - upload scripts or use built in test 
- Remote Access - swipe, gesture, and interact with devices in real-time via web browsers 

[ AWS Pinpoint ]
- engage with customers through different messaging channels (think Mailchimp)
- Target use cases is marketing, transaction, bulk messaging 

// Concept
Projects
  Channels 
     Segments 
        Campaigns 
          Journeys 
            Messaging Templates 
              Machine Learning



Container Platforms
---------------------------

[ ECS ]

[ EKS ]

[ ECR ]


// Additional Features
Lifecycle Policies
	Image Scanning


Functions
--------------

[ Lambda ]
- can have different versions of a Lambda that can be referenced by an alias
- by default lambdas are executed within an AWS managed VPC; they are not invoked within my VPC
- can have a VPC configuration in order to interface with resources within the VPC (or on prem)

// Limits
Execution = 1,000 concurent executions per region (default)
Memory =  128 MB - 10 GB RAM
Timeout = 3 secs - 15 minutes
Size = 50 MB (250 MB unziped)
Environment Variables = 4 KB

// Synchronous Invocations
- anytime a user or service invokes a lambda (e.g. via the console, aws-cli, api-gateway request)

// Asynchronous Invocations
- anytime a lamba is invoked by an event (e.g. an S3 PUT event, SNS, Cloudwatch)

// Application Load Balancer -> Lambda
- a Lambda can be associated with a target group and registered with an ALB
- the HTTP request is transformed into a JSON object
- functions should be idempotent

// Event Source Mapping
- pertains to Kinesis, DynamoDb Streams, SQS
- Lambda needs to POLL these services for BATCHES in order to process
- this happens synchronously

// Destinations
- send the result of an async call somewhere (success or failure)
- SQS,SNS,Lambda,Eventbridge
- can be used in combination with Dead Letter Queues for reprocessing

// Resource Based Policies
- give other accounts and AWS services (ALB, S3) permission to use Lambda resources
- located in the "Configuration" section

// Environment Variables
- Lambda makes env variables available to your source code
- Lambda also injects its own default env variables
- secrets can be encrypted with KMS (Lambda Service Key)
- total size of all environment variables cannot exceed 4 KB.

// Monitoring
- integrates w/ Cloudwatch Logs + Metrics by default
- can enable tracing in  Configuration > Monitoring > Active Tracing
- runs the X-Ray Daemon for me
- make sure Lambda has appropriate AWS managed policies
- injects XRAY related environment variables at runtime 

// Performance
- increase RAM to get more CPU
- can write small files (up to 512 MB) to /tmp; this area is cleared between invocations
- perform initializations outside the function handler (like DB connections) so they will only be used once across all invocations 

// External Dependencies
- dependencies must be installed within the project on a Linux instance and then the project must be zipped up and pushed to Lambda (via the CLI)
- the project will then contain the 3rd party dependencies (node_modules folder) needed to run your project

// CloudFormation
- Lambda's can be defined in-line (plain-text version of the script) in a CF template; external depenencies will not be included this way
- Lambda's can also be referecenced via an S3 location

// Layers
- support runtimes that are not supported by default (C++, Rust)
- externalize dependencies so we can re-use them
- app dependencies may not change much at all
- source code will change often
- this is a way to de-couple the two

App Package 1 + 2 = base source code
Layer 1 - Large Library Files (10MB)
Layer 2 - Large Library Files (30MB)
*both app packages can refer to Layer 1 and Layer 2 during their execution

// Lambda Container Images
- deploy lambda function as container images UP TO 10GB from ECR
- enables us to package large dependencies within the container instead of in layers
- base container must implement the Lambda Runtine API

FROM amazon/aws-lambda-nodejs:12

[ Versions + Alias ]
- by default we are referencing $LATEST; it is mutable and can be changed
- when I'm ready to publish my code I can create a VERSION
- versions are immutable; they cannot be changed 
- versions have their own ARN
- ALIAS point to versions

[ CodeDeploy ]
- helps shift traffic to new alias over time based on a strategy

Linear
  Linear10PercentEvery3Minutes
  Linear10PercentEvery10Minutes

Canary
  Canary10Percent5Minutes
  Canary10Percent30Minutes
  
All-At-Once
  Shift all traffic immediately


[ Step Functions ]
- comes with a graphical console for easier applicaiton workflow views and flows
- every step within a workflow is considered a state

// Components
State Machine
	Tasks

// Workflow Types
Standard
	have exactly-once execution
	can run for up to a year
	used for long-running workflows
	up to 2,000 executions per second
	pricing based per state transition

Express
	at least-one workflow execution
	can run up to 5 minutes
	useful for high event rate workloads
	IoT data streaming


// State Types
Pass - passes any input directly to its output
Task - single unit of work is performed (Lambda, Batch, SNS)
Choice - branching logic to state machiens
Wait - specified time delay 
Succeed - stops executions successfully
Failure - stops execution and marks them all as failures
Parrallel - runs parallel branches of executions within state machines 
Map - runs a set of steps based on elements of an input array



Asynchronous Messaging 
----------------------------------

[ SQS ]
- allows asynchronous processing of work
- one resource writes to the queue
- another resource picks it up
- supports messages up to 256 KB of content
- messages are encrypted in transit by default

// Configuration
Message Retention - how long a message stays on the queue; default 4 days; min: 1 minute, max: 14 days
Visibility Timeout - determines how long the message is locked while being processed; 
Delivery Delay - determines when a message becomes available on the queue; default 0; min: 0, max: 15 minutes
Queue Depth - how many messages are in the queue as a whole

// Polling
Short - connect, check for messages, disconnect
Long - connect, continue waiting for messages to come; best solution

// Dead-Letter Queue
- place to sideline problematic messages to avoid losing them forever


[ Amazon MQ ]
- messaging broker service
- makes it easy to migrate existing applicaitons to the cloud
- leverages multiple programming languages, OS, and messaging protocols (JMS, etc)
- supports Apache ActiveMQ or RabbitMQ engine types
- supports private networking ONLY (VPC scope)
- no default AWS integrations
- use AmazonMQ when migrating legacy apps to the cloud
- use SQS/SNS for net new applications

[ SNS ]
- pushed based messaging service
- delivers messages to endpoints that are subscribed to it
- supported endpoints (Kinesis Firehouse, Lambda, Email, HTTP/S, SMS, SQS)
- supports messages up to 256 KB of content

[ API Gateway ]
- fully managed API Service (think Azure API Management, GCP API Gateway)


[ EventBridge ]
- serverless event bus
- something happend and tell another service what happened
- the FASTEST way to respond to things that have happened in an environment

Define a rule
	Select an event bus
		Select a target

Content Delivery Network (CDN)
--------------------------------------------

[ Cloudfront ] 


Load-Balancing
---------------------

[ Classic ] 
- TCP (L4) + HTTP/S (L7)
- cross-zone load balancing disabled by default

[ Application ] 
- HTTP/S (L7 ONLY)
- URL based routing
- hostname based routing
- query string and header based routing
- can route to Lambda functions and private IPs (on-prem)
- cross-zone load balancing enabled by default


[Network]
- TCP/UDP
- less latency (~100ms)
- supports EIP assignment
- can route to EC2
- can route to Target Groups
- can route to ALB
- cross-zone load balancing disabled by default


[ Gateway ]
- think Azure Traffic Manager
- operates at Layer 3 (IP)
- supports fleets of 3rd party network appliances
- firewalls, intrusion detection, etc
- can route to EC2
- can route to Private IP

[ Connection Draining - Deregestration Delay ]
- 3600 seconds by default (5 minutes)
- can be set to 0 for short lived request


Monitoring
--------------

[ Cloudwatch ]

[ CloudWatch Logs ]
- the defacto place for all things logs

[ Amazon Managed Grafana ] 
- fully managed service for data visualization 
- allows me to correlate, query, and visualize logs and traces
- data sources include CloudWatch, Prometheus, and X-Ray

[ Amazon Managed Prometheus ] 
- mainly used for monitoring container metrics at scale (via EKS or self-hosted clusters)
- data is stored in "workspaces" for 150 days


Security
------------

[ AWS Shield ]
- protects against SYN/UDP floods, DDoS attacks, reflection attacks, and other L3/L4 attacks
- monitors ELB, Cloudfront, and Route53
- FREE by default

[ AWS Shield Advance ]
- enhanced protections for more advanced attacks
- always-on, flow-based monitoringof network traffic and active app monitoring
- 24/7 access to DDos Response Team (DRT)
- protects AWS bill from DDoS spikes
- 3000 per month

[ AWS WAF ]
- monitors web request to Cloudfront and Applicaiton Load Balancers
- lets me control access to my content (IPs, query string parameters, request headers, geolocation) 

[ AWS GuardDuty ]
- AI based threat detection service that continously looks for malicuous behavior
- monitors things like unusual API calls, attemtps to disable CloudTrail logging, compromising instances, port scanning/fail logins 
- centralized threat detection across multiple accounts
- it takes 7-14 days to establish a baseline
- 30 days free


[ AWS Macie ]
- leverages AI/ML to detect PII in files stored in S3
- can integrate with SNS to send notifications when detected


Migration
------------

[ AWS Snow Family ]

[ AWS DataSync ]

[ AWS Transfer Family ]

[ Migration Hub ] 

[ AWS Database Migration Service (DMS) ]





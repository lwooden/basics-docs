Google Cloud Basics



Cloud SDK and CLI
---------------------------------    
gcloud (compute engine, iam, etc)
    gcloud <component> <entity> <operation> <args> <flags> // sytanx
	gcloud init
	gcloud auth login
	glcoud config list
	
gsutil (cloud storage)

bq (big query)

kubectl (k8)



Geographical Concepts
-----------------------------
Regions (us-east1)
   Zones (i.e. AWS Availability Zones; us-east1-b)
     Edge Locations (i.e AWS Cloud Front, Azure Front Door)
     
     

Account Structure
-----------------------

Organization
	Folder (Departments or Teams)
		Project (i.e. Azure Subscription)
			Resources (all resources are bound to a project)
     
A project includes a set of users, APIs, billing, authentication, and monitoring


Billing
---------

Payments Profile -> Billing Acount -> Project 1 + Project 2 ...

[ Methods ]

Self-Service
	online billing linked to a debit/credit card
Invoiced
	handled via wiretransfers and mail (checks)


Service APIs
------------------
- allow you to interact with GCP services programmatically
- through the API Management Console you can monitor the requests, traffic, error and latency on any ENABLED API
- can create API credentials
- have access to the API library

gcloud services enable // enables service APIs from the command line



IAM
--------
Who (Identity) -> Has What Access (Role) -> For Which Resource

Member
	Role
		Condition
			Metadata
				Audit Config

[ Member ] 
- email address associated with a user, service account, or google group

[ Role ]  
- collection of permissions that indicate what a member can do on a resource
- permissions are not granted to users directly, but to roles
- permissions correspond 1-1 with REST API methods

[ Types of Roles ]

Primative
	historical roles that existed in GCP
	include Owner, Editor, Viewer
	avoid these as they are too broad
	
Predefined
	finer grained access-control 
	created and maintained by Google
	
Custom
	user defined 
	
[ Condition ]
- grant resource access to identities only if configured conditions are met


[ Policy ]
- 1 policy per resource
- 100 conditional bindings per policy
- 1500 members or 250 Google groups per policy
- takes up to 7 minutes for policies to update globally


[ Service Accounts ]
- associated with a public key pair (user or googled-managed)
- can be attached to resources (i.e. AWS Instance Role)
- can be impersonated by people (i.e. Assuming a role)

User-Manged
	you create the name
	<service-account-name>@<project-id>.iam.gserviceaccount.com
	
Default
	<project-id>@appspot.gserviceaccount.com
	<project-number>-compute@developer.gserviceaccount.com


Google-Managed
	


Cloud Identity Domain (i.e. Active Directory)
	google accounts that are in an organization, but ARE NOT tied to any GSuite applications or features
	AllAuthentitcated Users  - all service accounts or users on the internet who have authenticated with a Google account
	AllUsers - anyone who is on the internet, including authenticated and unauthenticated users
	
	
[ Identity Aware Proxy - IAP ]
- managed solution for authenticating and authorizing users
- supports Compute Engine, App Engine, and GKE

1. Users are directed to Google to  autenticate in to get AT
2. Authorization is driven via IAM



Networking
---------------

VPC
	Subnets
	 	Routes
	 		Firewall Rules
	

[ VPC ]
- no concept of an "Internet Gateway" (like Azure)
- instances will have internet access IF they have an external IP assocaited with them

// VPC Service Controls
- defines a service perimeter around protected resources
- enforces special rules at the border
- is independent of IAM or firewall policies (higer level)

Inbound Access FROM authorized VPC networks only
Outbound Access TO whitelisted IP ranges only

[ Shared VPC ]
- connects resources from multiple projects to a common network
- resources can communicate with each other securely and efficiently using internal IPs from that network
- you must designate a project as a "host" project and attach one or more other "service" projects to it
- shared VPC connects projects within the same organization

// Constraints

A project that participates in Shared VPC is either a host project or a service project:

A host project contains one or more Shared VPC networks. A Shared VPC Admin must first enable a project as a host project. After that, a Shared VPC Admin can attach one or more service projects to it.

A service project is any project that has been attached to a host project by a Shared VPC Admin. This attachment allows it to participate in Shared VPC. It's a common practice to have multiple service projects operated and administered by different departments or teams in your organization.

A project cannot be both a host project and a service project simultaneously. Thus, a service project cannot be a host project to further service projects.

You can create and use multiple host projects; however, each service project can only be attached to a single host project. For an illustration, see the multiple host projects example.

You can create networks, subnets, secondary address ranges, firewall rules, and other network resources in the host project. The host project can then share selected subnets, including secondary ranges, with the service projects. Services running in a service project can use Shared VPC to communicate with resources running in the other service projects.
	
	
[ Subnets ]
- subnets are associated with a REGION; instances are associated with a ZONE
- by default instances MUST have a public IP to access Google Cloud APIs (cloud storage, etc)
- this can be done internally by enabling "Private Google Access" on the subnet
**subnets can be EXTENDED without stoping resourses or deleting the current subnet -- UNIQUE

Reserved IP Address Per Subnet
	1st address - network
	2nd address - gateway
	2nd-to-last address - future use
	Last address - broadcast

[ Routes ] 

Default Route
	path to the internet
	path to Private Google Access (APIs)
	
Subnet Route
	defines path to each subnet in the VPC
	
Custom Routes
	static - created for VPN tunnels
	dynamic - for cloud routers and dynamically routed VPN appliances

[ Firewall Rules ]
 - used to determine what flows into, out of, and within the VPC
 - the lower the priority number the higher the importance
 - network tags serve as "security groups" which can be applied to instances in order to apply certain rules directly to groups of instances
 
 **Firewall Rules can be configured at the organizational or folder level (Hierarchical Firewall Policy); they will be inherited by the projects below them
 
 // 7 Components
 Direction -- Ingress/Egress
 Priority -- High/Low
 Action -- Allow/Deny
 Status -- Enabled/Disabled
 Target -- Network Tags
 Soure -- CIDR Range
 Port/Protocol -- TCP:80,443

[ VPC Peering ]
- no overlapping CIDRs
- non-transitive
- must create ingress firewall rules on both ends 
- network tags do not traverse VPCs


[ Cloud Loadbalancing ]
- can be global, regional, external, internal
- are supported by backend services 

HTTPS
	only L7 option
	distrubutes traffic based on content or geo location
	url or content based (forwarding rules)

SSL Proxy
	L4
	SSL connections are terminated and proxied to backend services
	*support for TCP w/ SSL offload
	
TCP Proxy
	L4
	client TCP connections are terminated at the LB 
	used for non-http traffic 
	foward traffic as SSL or TCP
	
Network
	L4
	not a proxy
	
	
Internal
	L4
	accessible within the VPC
	

[ Flow Logs ]

[ Cloud VPN ]
- must configure a "Peer VPN Gateway" and "Cloud VPN Gateway"
- HA VPN: two interfaces and two external IPs
- Classic VPN: single inferace and single external IP

[ Cloud DNS ]
- resembles Route 53


Compute
-------------

Compute Engine
	used for virtual machine workloads (i.e. EC2)
	
[ Classes ] 
General Purpose - E2, N2 N2D, N1
Memory Optimized - M1, M2
Compute Optimized - C2
Accelerator Optimized - A2

**You can also create custom machine types that fit your exact specification -- UNIQUE

[ Managed Instance Groups ]
- think AWS Auto-Scaling Groups; Azure VM Scale Sets
- instances that are managed as a single entity
- can be scaled out and scaled in based on a policy (i.e. CPU)
- deployed across multiple zones

Instance Template -> Instance Group

[ Startup Scripts ]
- think UserData from AWS
- can be set at launch time or retrieved from a Cloud Storage Bucket (via a object url)

[ Metadata Service ]
- endpoint available within your environment that allows you to access specific information about your instance on the fly
- http://metadata/computeMetadata/v1/instance/attributes/<node>
- can be access by your startup scripts 

[ Access Control ]
- you can create custom SSH keys and "upload" them to the instance details (metadata)
- you can let Google create/manage the SSH keys that you use to connect to your instances

[ Snapshots ]
- incremental by default
- stored in Cloud Storage (regional or mult-region)
- can be used to create a disk in any region/zone regardless of snapshot source locaiton -- UNIQUE 

[ Monitoring & Logging ]
- install the cloud monitoring agent (based on Fluentd)
- streams data directly to Cloud Logging service
- can also be routed to cloud storage for archiving


Storage
-----------

Cloud Storage
	used for object storage (i.e. S3)
	buckets are the foundational construct
	(3) availability options: regional, dual-regional, multi-regional
	(4) discreet classes: standard, nearline (30 day min), coldline (90 day min), archive (1 yr min)
	different classes represent cost efficiency and disaster recovery options
	can encrypt data with CMKs or Google Managed Keys
	object lifecycle mamagement for tiering
	retention policy to mandate delettion based on age
	policy locks bind the policy to the bucket; cannot be deleted until all objects are deleted
	object holds to prevent deletion of an object in case of an investigation
	

Cloud Filestore
	used for file storage (i.e. EFS)
	fully managed NFS service
	

Persistent Disk (Block Storage)
	network storage disks that back compute instances (i.e. EBS)
	performance is based on the disk capacity attached to an instance and the number of vCPUs that the instance has
	encrypted by default
	Standard (HDD) || Balanced (General Purpose) || SSD
	Zonal Persistent Disk - default option (1 zone; 1 region)
	Regional Persistent Disk - replicates between 2 zones
	Local SSD - very high IOPs and low latency (physically attached; highest performance)
	
	
	
Databases
---------------

[ SQL ]

Cloud SQL
  highly available 
  supports MySQL, Postgres, and SQL Server engines
  
Cloud Spanner
	enterprise grade
	globally distributed
	strongly consistent cloud first db service
	

[ No SQL ]

Cloud BigTable
	wide-colum store
	large scale
	low-latency
	
// Row Key Design
You can collapse multiple column values into the "Row Key" as ONE value

Vehicle		LAT	LONG	COMPANY	ROUTE
M117		40.7. -73.9	Metro			86

Vehicle					LAT		LONG
Metro#86#M117 	40.7.  	-73.9	
**Result after performing "Field Promotion" on the Company and Route colums to create a better indexable row key

Firestore
	rich mobile, web, and IOT applications
	strongly consistent
	
Firebase
	stores and syncs data between users in real time for mobile sign-ins, applications, ads, and chat
	
Memorystore
	fully managed Redis and Memcached databases
	milisecond data access
	
	
Data
------

Cloud Data Loss Prevention API
	can de-identify sensitive data in text content
	uses a de-identification transformation to mask, delete, or otherwise obscure the data
	
	

 Containers
---------------

[ Cloud Run ] 
- think Azure Container Apps/ACI
- platform that allows me to develop and deploy highly scalable containerized applications using my favorite language (Go, Python, Java, Node.js, .NET, and more) in a serverless manner
- can deploy your applications as services or jobs

Services
	used to run code that responds to web requests, or events
	can be controlled via versions for rollback, traffic splitting between versions, etc
	can used Ingress settings to control whether the service is public or private
	can scale to 0 and scale up based on request load -- UNIQUE
	can set a minimum of (1) instances if absolutely needed

Jobs
	used to run code that performs work (a job) and quits when the work is done.


[ Google Kubernetes Engince (GKE) ]
- managed Kubernetes service

GKE Standard: pay per node (i.e EKS)
	GKE Autopilot: pay per pod (i.e Fargate)
	
// Workload Identity Service
- maps a kubernetes service account -> IAM account
- roles can then be assigned to the IAM account so that pods can access other Google Services
	
	
[ Artifact Registry ]
- think AWS Elastic Container Repository (ECR)
- platform used to host container repositories similar to Docker Hub
- used by peer services like Cloud Run and App Engine in order to deploy containers
	
	
	
Severless
--------------

[ App Engine ]  
- think Azure App Service
- serverless platform that runs your workloads as code or containers so there are no servers to manage
- supports multiple versions of your application via traffic splitting (percentage distribution)
- integrates with other services like load balancer and cloud sql 

Standard Mode
	apps run in Sandbox environment
	specfic runtime versions used
	intended to run for free or at a very low cost
	application can scale to 0 instances when there is no traffic
	cost based on instance hours

Flexible Mode
	apps run on docker containers
	any versions of runtimes can be used
	cost based on VM resources

// Concept

Application
	Service
		Version
			Instances
	


[ Cloud Functions ] 
- think AWS Lambda and Azure Functions
- only ONE trigger can be bound to a function at a time
- source code is deployed to a cloud storage bucket as a zipfile -> Cloud Build prepares a container image -> Pushes it to Container Registry -> Cloud Functions uses this image to run your code

HTTP Functions
	triggered by HTTP requests; there is no API gateway required -- UNIQUE

Backround Funcitons
	triggered by events (Pub/Sub, changes in a bucket)


[ Cloud Build ] 
- think AWS CodeBuild
- great for building containers
-  include cloudbuild.yml file in the repository


[ Cloud Source Repository ]
- think AWS CodeCommit


[ Cloud Code ]



Asynchronous Messaging
----------------------------------

[ Cloud Task ]
- lets you separate out pieces of work that can be performed independently, outside of your main application flow
- task are placed on a queue to be processed, asynchronously, using handlers that you create
- supported handlers/workers are App Engine, Cloud Functions, Cloud Run, GKE, Compute Engine
- max size of task/message	1MB
- task/message retention 30 days


[ Cloud Pub/Sub ]
- think AWS SNS
- asynchronous messaging service
- max size of task/message	10MB
- task/message retention 7 days




API Management
-----------------------

[ Cloud Endpoints ]
- the classic method
- container based solution
- deploys a sidecar proxy container alongside your primary container (think K8 multi-container pod)
- built on top of nginx 
- v2 of the service uses Envoy as the underlying Proxy Container

[ API Gateway ]
- completely serverless 
- just provide API configuration spec
- supports the following backends: App Engine, Cloud Run, Cloud Functions


AI/ML
--------
- pre trained API offered by Google
- exposed by an API
- most features return a response with a confidence score

[ Cloud Vision API ]

Face Detection
Landmark Detection
Logo Detection
Label Detection
Object Detection
Web Entities
Text Detection (OCR Support)
Explicit Content Detection


[ Video Intelligence API ]

Detects Shot Changes
Tracks Objects
Logo Detection
Transcribing
Label Detection
Text Detection
Explicit Content Detection
Face/Person Detection
Streaming/Live Feed
Celebrity Detection

[ AutoML API ]
- fine tune your own custom models based off Googles models

[ Speach to Text API ]

[ Text to Text API ] 

[ Translation API ]

[ Natural Language API ]





Big Data
-------------

Dataproc
	managed Apache Spark service for processing large datasets
	Hadoop, MapReduce, Pig/Hiv 
	takes under 90 secs to provision 
	can turn off when not in use -- UNIQUE
	
DataFlow
	unified serverless stream and batch processing service
	executes Apache Bean processes
	
BigQuery
	fully managed data warehouse for data analytics
	built-in ML features
	can stream at 100k rows per second
	Standard SQL
		
BigLake
	platform that unifies data-warehouses and data-lakes
	can discover/create tables based on data that lives in Amazon S3 or Azure Data Lake --UNIQUE
	powered by BigQuery
	can apply table, row, column level security policies on object store tables
	
Datalab
	for visualiing, querying, and interacting with your data using programming languages
	
	
	
Encryption
--------------

[ Cloud KMS ]


Secrets Management
-----------------------------

[ Cloud Secret Manager ]


	
Operations Suite (i.e Stackdriver)
--------------------------------------------
- a suite of tools used for logging, monitoring, and application diagnostics

[ Cloud Monitoring ] 
- requires setting up a workspace (i.e. Azure Analyics Workspace)
- supports multi-project setup and multi-cloud
- leverages an agent that streams data from Compute Engine to the service
- supports GKE
- alerting policies
- provides insight into System Metrics (e.g. CPU, disk, etc)
- supports User Defined Metrics (e.g. HTTP status codes)

// Uptime Checks -- UNIQUE
**can perform the following
Expired SSL checks
Pass custom headers
Perform basic auth 
	
[ Cloud Logging ] 
- can accept logs from Google, AWS, on-prem resources
- supports audit logs (console), access transparency logs (what GCP support staff does), agent logs
- Log Viewer shows logs for one project
- can configure "exclusions" to decide WHAT you really want

// Logs Router
**sends logs to different "sinks" or endpoints
1. Default Sink - Default Logs Bucket
2. Big Query
3. Pub/Sub
4. Custom Log Bucket
	
[ Cloud Error Reporting ]  -- UNIQUE
- real time error monitoring and alerting
- consolidates all errors within a single pane of glass
- erros are deduplicated and grouped together into an "issue"
- how many occurences? when was it last seen?
- integrated into Cloud Functions, and App Engine (standard)

**Makes it incredibly easy to locate, discover, and address errors in apps
	
[ Cloud Debugger ]
- debugs a running application without interupting the live service
- the service takes a snapshot of the live service 
- allows you to insert breakpoints in the snapshot of the app and look for errors
	
[ Cloud Trace ]
- instrument my apps w/ OpenTelemetry, OpenCensus, Google SDK

Trace
	the total time it takes for a request to make it end-to-end
	
Span
	the time it took for a particualr "segment" of a request path

[ Profiler ] 
	
	
	
Security Command Center -- UNIQUE
------------------------------------
- a suite of tools used to help improve/maintain the security posture of a project/organization
- more so designed to be configured for an organization

[ Web Security Scanner ]
- will crawl a url of a Compute Engine, App Engine, or GKE web app
- checks for common vulnerablilites and exploits
- create a series of "scans"
- can set authentication method and frequency of the scan 
- work in progess; not highly valuable at the moment


[ Container Scanning API ]
- performs container scanning on images in Artifact Registry




Google Cloud Armour
----------------------------



	



C# - a programming language

.NET - a framework for building applications on Windows; there are different langauges that 
can use the .NET framework (F#)


C# -> IL Code -> Native Code
Java -> ByteCode -> Native Code


Assembly
  Namespace
    Class

Application
  Assembly
  Assembly
  Assembly


To use a class in a different "namespace" I must import it with "using" statment

using System;
using System.Collections.Generic;


Every project created in Visual Studio has a class called "Program"
Inside of Program is a method called "Main"; this is where everything kicks off


Visual Studio Shortcuts
-----------------------

cw <tab> - console.writeline()
CTRL + SHIFT + B - Build project
CTRL + F5 - run project
CTRL + d - duplicate line
CTRL + x - delete line


Data Structures
---------------

Arrays
  stores a collection variables of the "same" type
  fixed size
  once size is specified, it cannot be changed

int number1
int number2
int[] numbers = new int[2]
int[] numbers = new int[2] {1,2}


Enums

Strings
  use verbatim strings (@"My weird text) when using special characters
  
  












Ctrl K+D - format code

Internet Information Services (IIS) - web server for Windows

Namespace - a container for namespaces; I can have two classes that have the same name in two different namespaces, but never in the same namespace

DLL File - a compiled C# project
Nuget - repository of commonly used dlls (think npm)
Entity Framework - nicely integrates SQL models and objects into your c# code
LINQ - a syntax used to write SQL queries in c#

Access Identifiers
-----------------
Public - accessible from anyone
Private - accessible only from within its class
Protected - accessible from within its class and from its children

Output Type
-----------
static - there is only (1) instance allowed in memory; like "main" method
void - does not return anything; no output
string
int
bool

HTML - defines the content
CSS - specifies the layout
Javascript - controls the behavior


Inhertiance
-----------

public class PersonController : ApiController 

*This means that the PersonController class "inherits"
everything from the ApiController class (that is not private)


www.myfirstapp.com/person

[RoutePrefix("person)] // attribute
public class PersonController : ApiController // class
 {

  [Route("search")] // www.myfirstapp.com/person/search
  public List<string> Search() // method
  {


  }

  [HttpGet]
  [Route("{id}")] // www.myfirstapp.com/person/{id}
  public string GetPerson(Guid id)
  {
  
  }

  [Route("{id}/cars")] // www.myfirstapp.com/person/{id}/cars
  public List<string> GetCarsForPerson(Guid)
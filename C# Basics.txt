C# - a programming language

.NET is a framework for building applications on Windows; there are different langauges that 
can use the .NET framework (F#); classified as legacy 

.NETCore


C# -> IL Code -> Native Code
Java -> ByteCode -> Native Code


Assembly
  Namespace
    Class

Application
  Assembly
  Assembly
  Assembly


To use a class in a different "namespace" I must import it with "using" statment

using System;
using System.Collections.Generic;


Every project created in Visual Studio has a class called "Program"
Inside of Program is a method called "Main"; this is where everything kicks off


Visual Studio Shortcuts
-------------------------------

cw <tab> - console.writeline()
CTRL + SHIFT + B - Build project
CTRL + F5 - run project
CTRL + d - duplicate line
CTRL + x - delete line


Running A DotNet App
------------------------------

# Run a project
dotnet <project.dll> // usaully located at <PROJECT_ROOT>/bin/Debug/

# Run a prebuilt assembly
dotnet run <project.dll>


Function (Method) Types
---------------------

void - does not return anything

static - a method that can be called without the need to create an instance of the class that implements it;
there is only "one" instance of this method in memory (like "main)

Console.WriteLine("Hello") // I can call this method without initializing a new instance of the Console class
because there is only "one" instance of a console in a program




Classes
--------
 
- in statically typed languages, EVERYTHING is a class
- access modifiers define the security parameters around a particular property/method

[Access Modifiers]
public - code is accessible for all other classes
private - code is only accessible within the same class
protected - code is accessible within the same class but can be used by other classes that inherit from the base class
internal - code is only accessible within the same assembly

class Person {
  public string firstName;
  public string lastName;
  
  public void Introduce() {
  Console.WriteLine("My name is" + firstName);
  } 
}



Struct (Structure)
-----------------

- lightweight way to combine properties and methods (like classes)
- when you need to create thousands of instances of a small peice of structured data it is
more efficient to use a struct

public struct Coordinates {
  int x;
  int y;

}



Arrays
------

 - stores a collection variables of the "same" type
 - fixed size; once size is specified it cannot be changed

int number1
int number2
int[] numbers = new int[2]
int[] numbers = new int[2] {1,2}


Lists
----


Enums (Enumerations)
--------------------

- it is best to use enums when you have a number of related constants (like shipping rates)


public enum ShippingMethod {
 AirMail = 1.50
 Express = 3.00
 Overnight = 6.00
}


Strings
-------

use verbatim strings when using special characters to keep code readable

string path = "c:\\projects\\project1\\folder1" # messy
string path = @"c:\projects\project1\folder1" # clean

// Template style
string name = string.Format("{0} {1}", firstName, lastName)
 
string list = string.Join(",", numbers)

[Escape Characters]
\n - newline
\t - tab
\\ - backslash
\' - quotation mark
\" - double quotes
  

Database Migrations (Code-First)
---------------------------------

the process of using a series of classes to represent the structure of your database
as your model/class changes you can apply those changes immediately to your database via migrations

1) install Microsoft.EntityFrameworkCore.Tools as dependency
2) open package manager console
3) Run "Add-Migration <Migration_Name> to create a migration
4) Run "Update-Database <Migration_Name>" to apply it to the database




Dependecy Injection
-------------------
- when a class depends on another class
- we want our classes to depend on an "abstraction" rather than another class directly
- this is acheived through the creation of an "interface"


ClassA uses ClassB (dependency)

public ItemsController()
{
  // here the constructor is creating an instance of the InMem Repository class
  repository = new InMemItemsRepository();
}

public ItemsController(repository)
{
  // here the repository is being passed in and "injected" via a service into the controller class
  this.repository = repository
}

ClassA depends on -> Interface -> which is implemented by ClassB


Dependency A (registers) -> IServiceProvider (Service Container) -> Class (injected here)
// this happens when the app startsup (App Startup)





Data Transfer Objects - DTOs
----------------------------
- the contract that exists between our clients and our service
- essentially what we are giving back to the client









Ctrl K+D - format code

Internet Information Services (IIS) - web server for Windows

Namespace - a container for namespaces; I can have two classes that have the same name in two different namespaces, but never in the same namespace

DLL File - a compiled C# project
Nuget - repository of commonly used dlls (think npm)
Entity Framework - nicely integrates SQL models and objects into your c# code
LINQ - a syntax used to write SQL queries in c#



Output Type
-----------
static - there is only (1) instance allowed in memory; like "main" method
void - does not return anything; no output
string
int
bool

HTML - defines the content
CSS - specifies the layout
Javascript - controls the behavior


Inhertiance
-----------

public class PersonController : ApiController 

*This means that the PersonController class "inherits"
everything from the ApiController class (that is not private)


www.myfirstapp.com/person

[RoutePrefix("person)] // attribute
public class PersonController : ApiController // class
 {

  [Route("search")] // www.myfirstapp.com/person/search
  public List<string> Search() // method
  {


  }

  [HttpGet]
  [Route("{id}")] // www.myfirstapp.com/person/{id}
  public string GetPerson(Guid id)
  {
  
  }

  [Route("{id}/cars")] // www.myfirstapp.com/person/{id}/cars
  public List<string> GetCarsForPerson(Guid)
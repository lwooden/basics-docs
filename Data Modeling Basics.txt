Data Modeling Basics

Tooling
---------
- Prisma is the ORM of choice when dealing with Javascript 

// Example schema.prisma file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// example Prisma schema
model User {
  id String @id @default(cuid())
  email String @unique
  username String @unique
  name String?
  createdAt DateTime @default(now()) 
  updatedAt  DateTime   @updatedAt
}


Prisma Commands
--------------------------
npx prisma init --url file:./data.db

npx prisma db push

npx prisma db seed // invokes seed.ts in your folder

npx prisma migrate dev // initiates a migration an generates the necessary sql needed to get from point A -> point B

npx primsa migrate deploy

npx prisma studio // launches brower UI to inspect your database


Understanding Relationships
--------------------------------------

[ One-to-One ]


[ One-to-Many ]


[ Many-to-Many ]


Seeding Data
------------------

// seed.ts
import fs from 'node:fs'
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

// delete all users and notes in the database
await prisma.user.deleteMany()

// create a new user
const kody = await prisma.user.create({
	data: {
		email: 'kody@kcd.dev',
		username: 'kody',
		name: 'Kody',
	},
})

await prisma.note.create({
	data: {
		id: 'd27a197e',
		title: 'Basic Koala Facts',
		content:
			'Koalas are found in the eucalyptus forests of eastern Australia. They have grey fur with a cream-coloured chest, and strong, clawed feet, perfect for living in the branches of trees!',
		ownerId: kody.id,
		images: {
			create: [
				{
					altText: 'an adorable koala cartoon illustration',
					contentType: 'image/png',
					blob: await fs.promises.readFile(
						'./tests/fixtures/images/kody-notes/cute-koala.png',
					),
				},
				{
					altText: 'a cartoon illustration of a koala in a tree eating',
					contentType: 'image/png',
					blob: await fs.promises.readFile(
						'./tests/fixtures/images/kody-notes/koala-eating.png',
					),
				},
			],
		},
	},
})


Generating Fake Data for Seeding
----------------------------------------------
- Faker is a great library for generating reputable fake seed data


// Faker example in seed.ts file
import { faker } from '@faker-js/faker'

await prisma.user.create({
	data: {
		email: faker.internet.email(),
		username: faker.internet.userName(),
		name: faker.person.fullName(),
		notes: {
			create: [
				{
					title: faker.lorem.sentence(),
					content: faker.lorem.paragraph(),
				},
				{
					title: faker.lorem.sentence(),
					content: faker.lorem.paragraph(),
				},
			],
		},
	},
})


